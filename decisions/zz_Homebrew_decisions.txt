country_decisions = {

	homebrew_demonsterization_dec = {
		potential = {
			has_idea = AIG_war_economy
			has_country_flag = homebrew_demonsterization
			OR = {
				has_country_modifier = monstrous_nation
				has_country_flag = removing_monstrous
			}
		}
		allow = {
			full_idea_group = monstrous_ideas
			AND = {
				adm_power = 30
				dip_power = 30
				mil_power = 30
			}
		}
		effect = {
			decrease_monstrous_5 = yes
			change_government_reform_progress = 20
			add_adm_power = -30
			add_dip_power = -30
			add_mil_power = -30
		}
		ai_will_do = {
			factor = 0
		}
	}

	homebrew_factory_town_start = {
		potential = {
			has_idea_group = AIG_industrial_ideas
			NOT = { has_country_flag = factory_town_start }
		}
		allow = {
			has_idea = AIG_factory_towns
		}
		effect = {
			set_country_flag = factory_town_start
			set_country_flag = hb_has_factory_towns
			every_owned_province = { limit = { has_manufactory_trigger = yes }
				add_province_modifier = { name = factory_town duration = -1 }
			}	
		}
		ai_will_do = {
			factor = 1
		}
	}
	
	homebrew_superfort_update = {
		potential = {
			has_idea_group = festung0
			NOT = { has_country_flag = super_fort_update }
		}
		allow = {
			has_idea = festung7
		}
		effect = {
			set_country_flag = super_fort_update
			set_country_flag = hb_has_super_fort
			every_owned_province = { limit = { NOT = { has_province_modifier = adjacent_fort_penalty } }
				if = { limit = { fort_level = 12 }
					remove_province_modifier = super_fort1
					remove_province_modifier = super_fort2
					remove_province_modifier = super_fort3
					remove_province_modifier = super_fort4
					remove_province_modifier = super_fort5
					add_province_modifier = { name = super_fort6 duration = -1 }
				}
				else_if = { limit = { fort_level = 10 }
					remove_province_modifier = super_fort1
					remove_province_modifier = super_fort2
					remove_province_modifier = super_fort3
					remove_province_modifier = super_fort4
					remove_province_modifier = super_fort6
					add_province_modifier = { name = super_fort5 duration = -1 }
				}
				else_if = { limit = { fort_level = 8 }
					remove_province_modifier = super_fort1
					remove_province_modifier = super_fort2
					remove_province_modifier = super_fort3
					remove_province_modifier = super_fort5
					remove_province_modifier = super_fort6
					add_province_modifier = { name = super_fort4 duration = -1 }
				}
				else_if = { limit = { fort_level = 6 }
					remove_province_modifier = super_fort1
					remove_province_modifier = super_fort2
					remove_province_modifier = super_fort4
					remove_province_modifier = super_fort5
					remove_province_modifier = super_fort6
					add_province_modifier = { name = super_fort3 duration = -1 }
				}
				else_if = { limit = { fort_level = 4 }
					remove_province_modifier = super_fort1
					remove_province_modifier = super_fort3
					remove_province_modifier = super_fort4
					remove_province_modifier = super_fort5
					remove_province_modifier = super_fort6
					add_province_modifier = { name = super_fort2 duration = -1 }
				}
				else_if = {
					limit = { fort_level = 2 }
					remove_province_modifier = super_fort2
					remove_province_modifier = super_fort3
					remove_province_modifier = super_fort4
					remove_province_modifier = super_fort5
					remove_province_modifier = super_fort6
					add_province_modifier = { name = super_fort1 duration = -1 }
				}
				else = {
					remove_province_modifier = super_fort1
					remove_province_modifier = super_fort2
					remove_province_modifier = super_fort3
					remove_province_modifier = super_fort4
					remove_province_modifier = super_fort5
					remove_province_modifier = super_fort6
				}
			}	
		}
		ai_will_do = {
		factor = 1
		}
	}

	homebrew_metropolis_update = {
		potential = {
			#has_idea_group = zentra0
			always = no #currently disabled
		}
		allow = {
			has_idea = zentra3
		}
		effect = {
			if = { limit = { ai = yes }
				add_country_modifier = { name = nurael_suggestion duration = 7600 } #metropolis_update
			}
			every_owned_province = {
				if = {
					limit = {
						development = 25
						OR = {
							has_terrain = dwarven_hold
							has_terrain = dwarven_hold_surface
						}
					}
					add_province_modifier = { name = holdcentralism duration = -1 }
				}
				if = {
					limit = {
						development = 25
						NOT = { 
							has_terrain = dwarven_hold
							has_terrain = dwarven_hold_surface 
						}
					}
					add_province_modifier = { name = zentra_dev duration = -1 }
				}
			}
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				has_country_modifier = metropolis_update
			}
		}
	}
	
	homebrew_dwarf_citadel_start = {
		potential = {
			has_idea_group = AIG_serpentspine_ideas
			NOT = { has_country_flag = dwarf_citadel_start }
		}
		allow = {
			has_idea = AIG_dwarven_citadels
		}
		effect = {
			set_country_flag = dwarf_citadel_start
			set_country_flag = hb_has_dwarven_citadels
			every_owned_province = {
				if = {
					limit = {
						fort_level = 1
						continent = serpentspine		
					}
					add_province_modifier = { name = dwarven_citadel duration = -1 }
				}
				if = { limit = { owner = { has_idea = festung7 } }
					province_event = { id = homebrew.6 days = 1 }
				}
			}			
		}
		ai_will_do = {
			factor = 1
		}
	}

	homebrew_serpentsbeat_update = {
		potential = {
			has_idea_group = AIG_serpentspine_ideas
			NOT = { has_country_flag = serpentsbeat_update }
		}
		allow = {
			has_idea = AIG_serpentsbeat
		}
		effect = {
			set_country_flag = serpentsbeat_update
			set_country_flag = hb_has_serpentsbeat
			every_owned_province = { limit = { has_terrain = dwarven_road }
				add_province_modifier = { name = serpentsbeat duration = -1 }
			}
		}
		ai_will_do = { factor = 1 }
	}
	
	homebrew_rural_industry_update = {
		potential = {
			has_idea_group = infrastructure_ideas
			NOT = { has_country_flag = rural_industry_update }
		}
		allow = {
			has_idea = AIG_rural_industries
		}
		effect = {
			set_country_flag = rural_industry_update
			set_country_flag = hb_has_rural_industry
			every_owned_province = {
				limit = {
					OR = {
						has_terrain = glacier
						has_terrain = forest
						has_terrain = gladeway
						has_terrain = hills
						has_terrain = woods
						has_terrain = mountain
						has_terrain = jungle
						has_terrain = marsh
						has_terrain = highlands
						has_terrain = cavern
						has_terrain = mushroom_forest_terrain
						has_terrain = dwarven_road
						has_terrain = ancient_forest
					}		
				}
				add_province_modifier = { name = rural_industry duration = -1 }
			}
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				has_country_flag = rural_industry_update
			}
		}
	}
	
	homebrew_recruitment_start = {
		potential = {
			has_idea_group = militarismus0
			NOT = { has_country_flag = recruitment_start }
		}
		allow = {
			has_idea = militarismus3
		}
		effect = {
			set_country_flag = recruitment_start
			set_country_flag = hb_has_recruitment
			every_owned_province = {
				if = { limit = { has_building = training_fields }
					add_province_modifier = { name = recruitment2 duration = -1 }
				}
				else_if = { limit = { has_building = barracks }
					add_province_modifier = { name = recruitment1 duration = -1 }
				}
			}	
		}
		ai_will_do = {
			factor = 1
		}
	}
	
	homebrew_conscription_start = {
		potential = {
			has_idea_group = militarismus0
			NOT = { has_country_flag = conscription_start }
		}
		allow = {
			has_idea = militarismus6
		}
		effect = {
			set_country_flag = conscription_start
			set_country_flag = hb_has_conscription
			every_owned_province = {
				if = { limit = { has_building = conscription_center }
					add_province_modifier = { name = conscription2 duration = -1 }
				}
				else_if = { limit = { has_building = regimental_camp }
					add_province_modifier = { name = conscription1 duration = -1 }
				}
			}			
		}
		ai_will_do = {
			factor = 1
		}
	}
	
#	homebrew_milmage_start = {
#	potential = {
#		has_idea_group = militarismus0
#		NOT = { has_country_flag = milmage_start }
#		}
#	allow = {
#		has_idea = militarismus7
#		}
#	effect = {
#		set_country_flag = milmage_start
#		every_owned_province = {
#			limit = {
#				has_building = mage_tower
#				is_state = yes
#			}
#			add_province_modifier = {
#			name = "milmage"
#			duration = -1
#				}
#			}	
#		}
#	ai_will_do = {
#		factor = 1
#		}
#	}
	
	homebrew_urbanindustry_start = {
		potential = {
			has_idea_group = AIG_imperial_ideas
			NOT = { has_country_flag = urbanindustry_start }
		}
		allow = {
			has_idea = AIG_imperial_cities
		}
		effect = {
			set_country_flag = urbanindustry_start
			set_country_flag = hb_has_urban_industry
			every_owned_province = {
				limit = {
					OR = {
						has_terrain = dwarven_hold
						has_terrain = dwarven_hold_surface
						has_terrain = city_terrain
					}
				}
				add_province_modifier = { name = urban_industry duration = -1 }
			}
		}
		ai_will_do = { factor = 1 }
	}
	
	homebrew_mining_regulations_start = {
		potential = {
			has_idea_group = infrastructure_ideas
			NOT = { has_country_flag = mining_regulations_start }
		}
		allow = {
			has_idea = AIG_mining_regulations
		}
		effect = {
			set_country_flag = mining_regulations_start
			every_owned_province = {
				if = { limit = { trade_goods = damestear}
					set_province_flag = homebrew_permanent_damestear
					hidden_effect = {
						REB = {
							change_variable = { which = homebrew_permadamestear value = 1 }
						}
					}
				}
				if = { limit = { trade_goods = precursor_relics }
					set_province_flag = permanent_precursor_relics
				}
			}	
		}
		ai_will_do = {
			factor = 1
		}
	}
	
	gamer_move_start = {
		potential = {
			has_estate_privilege = artifice_invention_serpentrot_gas
			NOT = { has_country_flag = gamer_move }
		}
		allow = {
			always = yes
		}
		effect = {
			set_country_flag = gamer_move
			
		}
		ai_will_do = {
		factor = 1
			modifier = {
			factor = 0
			has_country_flag = nurael_convention
			}
		}
	}
	
	gamer_move_end = {
		potential = {
			has_estate_privilege = artifice_invention_serpentrot_gas
			has_country_flag = gamer_move
		}
		allow = {
			always = yes
		}
		effect = {
			clr_country_flag = gamer_move
		}
		ai_will_do = {
		factor = 1
			modifier = {
			factor = 0
			has_country_modifier = nurael_suggestion
			}
		}
	}
	
	#sign nurael convention
	nurael_convention_start = {
		potential = {
			has_country_flag = initialized_nurael_convention
			NOT = { has_country_flag = nurael_convention }
		}
		allow = {
			always = yes
		}
		effect = {
			set_country_flag = nurael_convention
			remove_country_modifier = nurael_suggestion
		}
		ai_will_do = {
		factor = 1
			modifier = {
			factor = 0
			has_country_modifier = chief_artificer
			}
		}
	}
	
	nurael_convention_end = {
		potential = {
			has_country_flag = nurael_convention
			NOT = { has_country_modifier = nurael_suggestion }
		}
		allow = {
			always = yes
		}
		effect = {
			add_stability = -1
			add_country_modifier = {
				name = nurael_suggestion
				duration = -1
				}
			clr_country_flag = nurael_convention
		}
		ai_will_do = {
		factor = 0
			modifier = {
			factor = 0
			NOT = { has_country_modifier = chief_artificer }
			}
		}
	}
	
	#update melting pot #now changed to initialization
	homebrew_melting_pot_update = {
		potential = {
			has_idea_group = assimilation0
			NOT = { has_country_flag = hb_has_melting_pot }
		}
		allow = {
			has_idea = homebrew_melting_pot
		}
		effect = {
			set_country_flag = hb_has_melting_pot
			hidden_effect = {
				every_owned_province = {
					province_event = { id = homebrew.39 days = 1 } #old event to update modifiers
				}
			}
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				has_country_modifier = meltingpot_update
			}
		}
	}
	
	#initialize wildcard
	homebrew_wildcard_start = {
		potential = {
			has_idea_group = gesellschaft0
			NOT = { has_country_flag = wildcard_start }
		}
		allow = {
			has_idea = homebrew_wildcard
		}
		effect = {
			set_country_flag = wildcard_start
			country_event = { id = homebrew.40 }
		}
		ai_will_do = {
			factor = 1
		}
	}
	
	#update wildcard
	homebrew_wildcard_update = {
		potential = {
			has_idea_group = gesellschaft0
			has_country_flag = wildcard_start
		}
		allow = {
			has_idea = homebrew_wildcard
			custom_trigger_tooltip = { 
				tooltip = wildcard_cooldown_tt 
				had_country_flag = { flag = wildcard_cooldown days = 3650 } 
			}
		}
		effect = {
			clr_country_flag = wildcard_cooldown
			country_event = { id = homebrew.41 }
		}
		ai_will_do = {
			factor = 1
		}
	}
	
	initialize_central_planning = {
		potential = {
			has_idea_group = zentra0
			NOT = { has_country_flag = central_planning_active }
		}
		allow = { has_idea = zentra1 }
		effect = {
			set_country_flag = central_planning_active
			every_owned_province = {
				if = { limit = { development = 150 has_province_modifier = metropolis_flag_10 }
					clear_metropolis_planning = yes #just in case
					add_province_modifier = { name = metropolis_planning_10 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_10 duration = -1 hidden = yes }
					}
				}
				else_if = { limit = { development = 135 has_province_modifier = metropolis_flag_9 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_9 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_9 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 120 has_province_modifier = metropolis_flag_8 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_8 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_8 duration = -1 hidden = yes  }
					}
				}
				else_if = { limit = { development = 105 has_province_modifier = metropolis_flag_7 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_7 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_7 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 90 has_province_modifier = metropolis_flag_6 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_6 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_6 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 75 has_province_modifier = metropolis_flag_5 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_5 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_5 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 60 has_province_modifier = metropolis_flag_4 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_4 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_4 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 45 has_province_modifier = metropolis_flag_3 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_3 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_3 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 30 has_province_modifier = metropolis_flag_2 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_2 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_2 duration = -1 hidden = yes}
					}
				}
				else_if = { limit = { development = 15 has_province_modifier = metropolis_flag_1 }
					clear_metropolis_planning = yes
					add_province_modifier = { name = metropolis_planning_1 duration = -1 hidden = yes}
					if = { limit = { OR = { has_terrain = dwarven_hold has_terrain = dwarven_hold_surface } }
						add_province_modifier = { name = hold_ei_1 duration = -1 hidden = yes}
					}
				}
			}
		}
	}

	homebrew_conscript_builders_dec = {
		potential = {
			has_idea_group = wehrpflicht0
		}
		allow = {
			has_idea = wehrpflicht1
			if = { 
				limit = { 
					has_country_flag = conscript_builder_sailors 
				}
				sailors = 2500
			}
			else = {
				manpower = 15 #minimum entry req due to how it works (technically you need 20k at mil tech 24, but if you're nickle and dime'ing 5k manpower at tech 24 you have bigger problems)
			}
			if = { #done like this to make the ui neater
				limit = {
					has_country_flag = conscript_builder_micro
				}
				custom_trigger_tooltip = { tooltip = conscript_builder_micro_on_tt always = yes } #in hindsight a custom loc would work better, but eh w/e
			}
			else = {
				custom_trigger_tooltip = { tooltip = conscript_builder_micro_off_tt always = yes }
			}
			any_owned_province = {
				has_construction = building
				if = {
					limit = {
						ROOT = { 
							has_country_flag = conscript_builder_micro
						}
					}
					infantry_in_province = ROOT
				}
				if = { #wip
					limit = {
						ROOT = { 
							has_country_flag = conscript_builder_sailors
						}
					}
					has_port = yes
				}
				hidden_trigger = { #don't want these provinces to get in the way of selection
					NOT = {
						OR = {
							has_construction = bulwari_canals
							has_construction = bulwari_locks_and_lifts
							has_construction = great_bulwari_watercourse
							has_construction = restoring_hold
							has_construction = triunic_road
							has_construction = adenica_longlance_knights_academy
							has_construction = adenica_grand_tourney_grounds
							has_construction = fort_magic
							has_construction = world_tree_lvl_1
							has_construction = world_tree_lvl_2
							has_construction = world_tree_lvl_3
							has_construction = world_tree_root
							has_construction = world_tree_dead_root
							has_construction = destroyed_world_tree
							has_construction = destroying_root
							has_construction = railway_work
							has_construction = allclan_industrialization_works
							has_construction = digging_deeper
							has_construction = ziggurat_of_surakel
							has_construction = garden_of_secrets_0
							has_construction = garden_of_secrets_1
							has_construction = garden_of_secrets_2
							has_construction = garden_of_secrets_3
							has_construction = jaddari_sunset_temple
							has_construction = jaddari_sunrise_temple
							has_construction = castonath_preparation
							has_construction = castonath_build
							has_construction = phoenix_empire_palace_build
							has_construction = xhazobkult_pyre
							#these constructions could be done, but some have events tied to their construction like dwarven holds and bulwar/castonath projects
						}
					}
				}
			}
		}
		effect = {
			clr_country_flag = conscript_builders_cd
			set_country_flag = conscript_builders_cd
			random_province = {
				limit = {
					owned_by = ROOT
					has_construction = building
					if = {
						limit = {
							ROOT = { 
								has_country_flag = conscript_builder_micro
							}
						}
						infantry_in_province = ROOT
					}
					if = { #wip
						limit = {
							ROOT = { 
								has_country_flag = conscript_builder_sailors
							}
						}
						has_port = yes
					}
					NOT = {
						OR = {
							has_construction = bulwari_canals
							has_construction = bulwari_locks_and_lifts
							has_construction = great_bulwari_watercourse
							has_construction = restoring_hold
							has_construction = triunic_road
							has_construction = adenica_longlance_knights_academy
							has_construction = adenica_grand_tourney_grounds
							has_construction = fort_magic
							has_construction = world_tree_lvl_1
							has_construction = world_tree_lvl_2
							has_construction = world_tree_lvl_3
							has_construction = world_tree_root
							has_construction = world_tree_dead_root
							has_construction = destroyed_world_tree
							has_construction = destroying_root
							has_construction = railway_work
							has_construction = allclan_industrialization_works
							has_construction = digging_deeper
							has_construction = ziggurat_of_surakel
							has_construction = garden_of_secrets_0
							has_construction = garden_of_secrets_1
							has_construction = garden_of_secrets_2
							has_construction = garden_of_secrets_3
							has_construction = jaddari_sunset_temple
							has_construction = jaddari_sunrise_temple
							has_construction = castonath_preparation
							has_construction = castonath_build
							has_construction = phoenix_empire_palace_build
							has_construction = xhazobkult_pyre
						}
					}
				}
				tooltip = { add_unrest = -0.01 } #dummy that marks province in the effect preview
				if = { 
					limit = { 
						ROOT = {
							has_country_flag = conscript_builder_sailors 
						}
					} #wip
					custom_tooltip = hb_conscript_builders_sailors_tt
				}
				else = {
					custom_tooltip = hb_conscript_builders_tt
				}
				hidden_effect = {
				
					#sets the base cost according to the building's base cost
					set_variable = { which = base_build_cost value = 0 } #invalid building, redundancy in case I'm an idiot
					trigger_switch = {
						on_trigger = has_construction
						temple = { set_variable = { which = base_build_cost value = 100 } }
						cathedral = { 
							if = { limit = { has_building = temple }
								set_variable = { which = base_build_cost value = 200 }
							}
							else = {
								set_variable = { which = base_build_cost value = 300 } 
							}
						}
						workshop = { set_variable = { which = base_build_cost value = 150 } }
						counting_house = { 
							if = { limit = { has_building = workshop }
								set_variable = { which = base_build_cost value = 450 }
							}
							else = {
								set_variable = { which = base_build_cost value = 600 } 
							}
						}
						marketplace = { set_variable = { which = base_build_cost value = 150 } }
						trade_depot = { 
							if = { limit = { has_building = marketplace }
								set_variable = { which = base_build_cost value = 300 }
							}
							else = {
								set_variable = { which = base_build_cost value = 450 }
							} 
						}
						stock_exchange = { 
							if = { limit = { has_building = trade_depot }
								set_variable = { which = base_build_cost value = 150 }
							}
							else_if = { limit = { has_building = marketplace }
								set_variable = { which = base_build_cost value = 450 }
							}
							else = {
								set_variable = { which = base_build_cost value = 600 }
							} 
						}
						courthouse = { set_variable = { which = base_build_cost value = 150 } }
						town_hall = { 
							if = { limit = { has_building = courthouse }
								set_variable = { which = base_build_cost value = 150 }
							}
							else = {
								set_variable = { which = base_build_cost value = 300 } 
							}
						}
						barracks = { set_variable = { which = base_build_cost value = 150 } }
						training_fields = { 
							if = { limit = { has_building = barracks }
								set_variable = { which = base_build_cost value = 300 }
							}
							else = {
								set_variable = { which = base_build_cost value = 450 } 
							}
						}
						regimental_camp = { set_variable = { which = base_build_cost value = 300 } }
						conscription_center = { 
							if = { limit = { has_building = regimental_camp }
								set_variable = { which = base_build_cost value = 300 }
							}
							else = {
								set_variable = { which = base_build_cost value = 600 }  
							}
						}
						dock = { set_variable = { which = base_build_cost value = 150 } }
						drydock = { 
							if = { limit = { has_building = dock }
								set_variable = { which = base_build_cost value = 300 }
							}
							else = {
								set_variable = { which = base_build_cost value = 450 }  
							} 
						}
						shipyard = { set_variable = { which = base_build_cost value = 150 } }
						grand_shipyard = { 
							if = { limit = { has_building = shipyard }
								set_variable = { which = base_build_cost value = 300 }
							}
							else = {
								set_variable = { which = base_build_cost value = 450 }  
							} 
						}
						coastal_defence = { set_variable = { which = base_build_cost value = 100 } }
						naval_battery = { 
							if = { limit = { has_building = coastal_defence }
								set_variable = { which = base_build_cost value = 100 }
							}
							else = {
								set_variable = { which = base_build_cost value = 200 }  
							} 
						}
						fort_15th = { set_variable = { which = base_build_cost value = 250 } }
						fort_16th = { 
							if = { limit = { has_building = fort_15th }
								set_variable = { which = base_build_cost value = 250 }
							}
							else = {
								set_variable = { which = base_build_cost value = 500 }  
							} 
						}
						fort_17th = { 
							if = { limit = { has_building = fort_16th }
								set_variable = { which = base_build_cost value = 250 }
							}
							else_if = { limit = { has_building = fort_15th }
								set_variable = { which = base_build_cost value = 500 }
							}
							else = {
								set_variable = { which = base_build_cost value = 750 }  
							} 
						}
						fort_18th = {
							if = { limit = { has_building = fort_17th }
								set_variable = { which = base_build_cost value = 250 }  
							} 
							else_if = { limit = { has_building = fort_16th }
								set_variable = { which = base_build_cost value = 500 }
							}
							else_if = { limit = { has_building = fort_15th }
								set_variable = { which = base_build_cost value = 750 }
							}
							else = {
								set_variable = { which = base_build_cost value = 1000 }  #highest base cost sets the minimum manpower req in the decision
							} 
						} 
						university = { set_variable = { which = base_build_cost value = 450 } }
						wharf = { set_variable = { which = base_build_cost value = 750 } }
						weapons = { set_variable = { which = base_build_cost value = 750 } }
						textile = { set_variable = { which = base_build_cost value = 750 } }
						plantations = { set_variable = { which = base_build_cost value = 750 } }
						tradecompany = { set_variable = { which = base_build_cost value = 750 } }
						farm_estate = { set_variable = { which = base_build_cost value = 750 } }
						mills = { set_variable = { which = base_build_cost value = 750 } }
						furnace = { set_variable = { which = base_build_cost value = 750 } }
						ramparts = { set_variable = { which = base_build_cost value = 750 } }
						soldier_households = { set_variable = { which = base_build_cost value = 750 } }
						impressment_offices = { set_variable = { which = base_build_cost value = 750 } }
						state_house = { set_variable = { which = base_build_cost value = 750 } }
						mage_tower = { set_variable = { which = base_build_cost value = 750 } }
					}
					
					#scans for construction progress, local build cost and speed modifiers, and makes an all-in-one variable
					export_to_variable = { which = province_build_progress value = trigger_value:construction_progress who = THIS }
					subtract_variable = { which = province_build_progress value = 1 }
					multiply_variable = { which = province_build_progress value = -1 }
					export_to_variable = { which = owner_build_cost value = modifier:build_cost who = ROOT }
					export_to_variable = { which = province_build_cost value = modifier:local_build_cost who = THIS }
					change_variable = { which = owner_build_cost which = province_build_cost }
					change_variable = { which = owner_build_cost value = 1 }
					export_to_variable = { which = owner_build_speed value = modifier:build_time who = ROOT }
					export_to_variable = { which = province_build_speed value = modifier:local_build_time who = THIS }
					change_variable = { which = owner_build_speed which = province_build_speed }
					change_variable = { which = owner_build_speed value = 1 }
					multiply_variable = { which = base_build_cost which = owner_build_cost }
					set_variable = { which = refund_cost which = base_build_cost }
					multiply_variable = { which = base_build_cost which = province_build_progress }
					multiply_variable = { which = base_build_cost which = owner_build_speed }
					divide_variable = { which = base_build_cost value = 100 } #model is based on a build cost of 100
					
					#removes manpower, adjusted according to above values (consider changing to binary)
					while = { limit = { check_variable = { which = base_build_cost value = 0.01 } }
						if = { #wip
							limit = {
								ROOT = { 
									has_country_flag = conscript_builder_sailors
								}
							}
							ROOT = { add_sailors = -5 }
						}
						else = {
							ROOT = { add_manpower = -0.02 }
						}
						change_variable = { which = base_build_cost value = -0.01 }
					}
					
					#rushing production - can only fully complete construction as of now
					trigger_switch = {
						on_trigger = has_construction
						temple = { add_building = temple }
						cathedral = { add_building = cathedral }
						workshop = { add_building = workshop }
						counting_house = { add_building = counting_house }
						marketplace = { add_building = marketplace }
						trade_depot = { add_building = trade_depot }
						stock_exchange = { add_building = stock_exchange }
						courthouse = { add_building = courthouse }
						town_hall = { add_building = town_hall }
						barracks = { add_building = barracks }
						training_fields = { add_building = training_fields }
						regimental_camp = { add_building = regimental_camp }
						conscription_center = { add_building = conscription_center }
						dock = { add_building = dock }
						drydock = { add_building = drydock }
						shipyard = { add_building = shipyard }
						grand_shipyard = { add_building = grand_shipyard }
						coastal_defence = { add_building = coastal_defence }
						naval_battery = { add_building = naval_battery }
						university = { add_building = university }
						fort_15th = { add_building = fort_15th }
						fort_16th = { add_building = fort_16th }
						fort_17th = { add_building = fort_17th }
						fort_18th = { add_building = fort_18th }
						wharf = { add_building = wharf }
						weapons = { add_building = weapons }
						textile = { add_building = textile }
						plantations = { add_building = plantations }
						tradecompany = { add_building = tradecompany }
						farm_estate = { add_building = farm_estate }
						mills = { add_building = mills }
						furnace = { add_building = furnace }
						ramparts = { add_building = ramparts }
						soldier_households = { add_building = soldier_households }
						impressment_offices = { add_building = impressment_offices }
						state_house = { add_building = state_house }
						mage_tower = { add_building = mage_tower }
					}
					
					#canceling construction, and negating refunds
					if = { limit = { construction_progress = 0.1 }
						multiply_variable = { which = refund_cost value = 0.5 }
					}
					while = {
						limit = { check_variable = { which = refund_cost value = 1 } }
						ROOT = { add_treasury = -1 }
						change_variable = { which = refund_cost value = -1 }
					}
					cancel_construction = yes
						
					#while = { #damn you diggyhole events, you deceived me :(
					#	limit = {
					#		NOT = { construction_progress = 0.99 }
					#		ROOT = { manpower = 0.05 }
					#	}
					#	add_construction_progress = 0.05 #only works on great projects, tf paradox
					#	set_variable = { which = scaled_cost_modifier which = base_build_cost }
					#	while = { limit = { check_variable = { which = scaled_cost_modifier value = 0.05 } }
					#		ROOT = { add_manpower = -0.05 }
					#		change_variable = { which = scaled_cost_modifier value = -0.05 }
					#	}
					#} #this would allow for partial completion of buildings and reduce verbosity, as of now I can only make it work as an all-or-nothing
				}
			}
		}
		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0
				NOT = { manpower_percentage = 0.9 } #ensures they don't nuke their manpower
			}
			modifier = {
				factor = 0
				NOT = { had_country_flag = { flag = conscript_builders_cd days = 90 } }
			}
		}
	}
	
	homebrew_toggle_conscript_builders_micro = {
		potential = {
			has_idea_group = wehrpflicht0
		}
		allow = {
			has_idea = wehrpflicht1
		}
		effect = {
			if = { limit = { has_country_flag = conscript_builder_micro  }
				custom_tooltip = conscript_builder_disable_tt
				clr_country_flag = conscript_builder_micro
			}
			else = {
				custom_tooltip = conscript_builder_enable_tt
				set_country_flag = conscript_builder_micro
			}
		}
		ai_will_do = {
			factor = 0 #lag machine otherwise
		}
	}
	
	homebrew_toggle_conscript_builders_sailors = {
		potential = {
				has_idea_group = wehrpflicht0
				OR = {
					has_idea_group = naval_ideas 
					has_idea_group = homebrew_amphibious_ideas
				}
		}
		allow = {
				has_idea_group = wehrpflicht0
				OR = {
					full_idea_group = naval_ideas 
					full_idea_group = homebrew_amphibious_ideas
				}
		}
		effect = {
			if = { limit = { has_country_flag = conscript_builder_sailors  }
				custom_tooltip = conscript_sailor_disable_tt
				clr_country_flag = conscript_builder_sailors
			}
			else = {
				custom_tooltip = conscript_sailor_enable_tt
				set_country_flag = conscript_builder_sailors
			}
		}
		ai_will_do = {
			factor = 0 #lag machine otherwise
		}
	}
	
	homebrew_open_temp_fort_menu = {
		potential = {
			has_idea_group = formation0
		}
		allow = {
			has_idea = hb_fob
			is_at_war = yes
		}
		effect = {
			set_country_flag = hb_menu_open
			country_event = { id = homebrew.53 }
		}
		ai_will_do = {
			factor = 0 #lag machine otherwise
		}
	}


	homebrew_highlight_fort_exceptions = {

		color = { 102 102 255 }

		potential = {
			ai = no
		}

		provinces_to_highlight = {

			OR = {
				homebrew_excluded_provinces = yes

				has_province_flag = highlight_exception_flag

			}

			
		}

		allow = {
			#homebrew_excluded_provinces = yes
			
			custom_trigger_tooltip = {
				tooltip = homebrew_highlight_fort
				always = yes
			}
		}

		effect = {
            custom_tooltip = homebrew_highlight

			every_province = {
				limit = {

					OR = {
						has_province_modifier = harpy_roost_present
						has_province_modifier = harpy_roost_mod_roost_fledgling
						has_province_modifier = harpy_roost_mod_roost_flourishing_active
						has_province_modifier = castanorian_citadel
					}

					NOT = {
						has_province_flag = highlight_exception_flag
					}
				}

				set_province_flag = highlight_exception_flag
				
			}
		}

		ai_will_do = {
			factor = 0
		}
	}
} #end of file